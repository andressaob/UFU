Referente aos programas propriamente ditos:
	- nos programas são declaradas classes e objetos, cada objeto faz parte de uma classe e uma classe pode ter vários objetos;
	- as classe são praticamente tipos de estruturas (ex.: public class nome);
	- as classes tem atributos (características) que podem ser declarados como "public" (pode ser alterado dentro de qualquer objeto e qualquer classe), "private" (pode ser acessado apenas de dentro do próprio objeto) e etc., e tem também os métodos, que são como funções;
	- normalmente os métodos que fazem alterações dentro do próprio objeto tem argumentos e são de algum tipo específico (ex.: altera);
	- os outros métodos que não fazem alterações normalmente são void e podem ou não ter argumentos (ex.: retorna);
	- as classes tem construtores, sendo o mais comum o "new classe", que serve para inicializar os objetos;
			- classe_tal objeto = new classe_tal.
	- tem construtores que podem ser definidos nas classes recebendo alguns argumentos, nesse caso é utilizado o termo "public" (ex.: public classe(atributos){} - e inicializado da seguinte forma "objeto = new classe(atributos)");
	- tem como se auto-referenciar usando principalmente o "this", bastante usado em métodos para não ter que ficar inventando nomes de variáveis para não confundir com as que já estão criadas (ex.: this.nome = nome - a variável nome que foi passada como atributo recebe a variável nome passada como argumento no método);
	- para não ficar criando diversas classes com atributos semelhante, é possível utilizar uma classe como herança (referência) e dela extender as demais classes, que herdarão os atributos e métodos da "classe mãe"; para tal, é usado o termos "extends" (ex.: public class Mamifero extends Animal;);
	- para fazer a main em java é utilizada "public static void main (String a[]){}";

Referente aos conceitos:
	-Objeto : elemento componente de um problema, entidade em um sistema de software;
		- Atributos: Propriedades que caracterizam o objeto; comunicação com o meio resultam em ações que podem alterar seu estado;
		- Métodos: Funções; serviços oferecidos pelo objeto.
	- Cada objeto tem uma posição de memória específica; mesmo que sejam de uma mesma classe , dois objetos são distintos um do outro;
	- Os métodos são definidos no objeto chamado, não no objeto chamador;
	- Um grupo de objetos (classe) tem os mesmos atributos (≠ mesmos valores de atributos), mesmos comportamentos, mesmos relacionamentos com outros objetos;
	- A classe é o molde dos objetos, sua matriz geradora, uma fábrica de objetos;
	- Processo de criação de um programa orientado a objeto:
		-Análise: detalha “o que deveser feito”, detalha requisitos do sistema;
		- Projeto: detalha “como será feito”, cria modelos de como o sistema será construído;
		- Programação: “faz”, constrói o sistema.
	- Encapsulamento: propriedade para garantir a preservação das características e serviços providos pelos objetos de uma classe, bom funcionamento das regras de negócios;
		- determina as "regras" do programa, por exemplo, se pede uma idade para o usuário vai ter uma parte que vai garantir que essa idade seja sempre positiva;
		- conseguido com restrições de acesso.
	- Construtores: Métodos especiais de uma classe, utilizados para INICIALIZAR atributos e EXECUTAR PROCEDIMENTOS de inicialização;
	- Auto-referenciamento: utilizando o auto-referenciamento, é possivel construir o código sem saber a priori os objetos a serem criados;
		- palavras-chave: this, self, me;
	- Herança: criação de hierarquia de classes, reutilização de atributos e métodos de uma classe por outra classe, características comuns passadas de classe para classe na hierarquia;
		- cria-se uma classe genérica, contendo atributos e métodos comuns e outras classes herdam esses atributos e métodos;
		- classes específicas: herdam atributos/métodos genéricos e implementam atributos/métodos específicos, sub classe;
		- classe-mãe: classe genérica, super classe;
		- Vantagens: diminui a quantidade de código (reutilização de elementos) e traz maior integridade e facilidade de manutenção (alterações no código da super classe são compartilhadas com todas as suas subclasses, sem a necessidade de reprogramação).
